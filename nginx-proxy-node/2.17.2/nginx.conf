events {}

http {
  # NGINX will handle gzip compression of responses from the app server
  gzip on;
  gzip_proxied any;
  gzip_types application/javascript application/json text/css;
  gzip_min_length 1000;
  server_tokens off;

  log_format json '{ "timestamp": "$time_iso8601", '
    '"host": "$host", '
    '"remote_addr": "$remote_addr", '
    '"remote_user": "$remote_user", '
    '"request_time": "$request_time", '
    '"status": $status, '
    '"request_method": "$request_method", '
    '"request_uri": "$request_uri", '
    '"body_bytes_sent": $body_bytes_sent, '
    '"http_user_agent": "$http_user_agent" }';

  access_log  /var/log/nginx/access.log  json;

  map_hash_max_size 128;
  map_hash_bucket_size 128;
  include /etc/nginx/rewrites.conf;

  server {
    listen 3000;

    location /info/ {
      proxy_pass https://35.214.145.143/info/;
        proxy_ssl_trusted_certificate /etc/nginx/trusted_ca_cert.crt;

      proxy_ssl_verify       off;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_cache_bypass $http_upgrade;
      add_header 'Access-Control-Allow-Origin' '*';

      if ($redirect_uri != "") {
        absolute_redirect off;
        return 301 /info;
      }
    }

    location / {
      # Set VPC subnet as trusted
      set_real_ip_from 172.31.0.0/16;
      # Set CloudFront subnets as trusted
      set_real_ip_from 172.31.32.0/20;
      set_real_ip_from 172.31.48.0/20;
      set_real_ip_from 172.31.0.0/20;
      set_real_ip_from 172.31.80.0/20;
      set_real_ip_from 172.31.64.0/20;
      set_real_ip_from 172.31.16.0/20;

      # Look for client IP address in the X-Client-IP header
      real_ip_header X-Forwarded-For;
      # Ignore trusted IPs
      real_ip_recursive on;

      # Reject requests with unsupported HTTP method
      if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
        return 405;
      }

      # Only requests matching the whitelist expectations will
      # get sent to the application server
      proxy_pass http://app:3000;
        proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_cache_bypass $http_upgrade;

      if ($redirect_uri != "") {
        absolute_redirect off;
        return 301 $redirect_uri;
      }
    }
  }
}
